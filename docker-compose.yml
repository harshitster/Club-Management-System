networks:
  citus-network:
    driver: bridge

services:
  pg_master:
    container_name: "pg_master"
    platform: linux/amd64
    image: "citusdata/citus:latest"
    ports:
      - "5432:5432"
    labels:
      - "com.citusdata.role=Master"
    environment: &AUTH
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      PGUSER: "postgres"
      PGPASSWORD: "postgres"
      POSTGRES_HOST_AUTH_METHOD: "trust"
      POSTGRES_DB: "citus"
    healthcheck:
      test: ["CMD-SHELL", "/pg_healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - citus-master-data:/var/lib/postgresql/data
    networks:
      - citus-network

  pg_worker_1:
    container_name: "pg_worker_1"
    build:
      context: .
      dockerfile: worker-node/Dockerfile
    platform: linux/amd64
    labels:
      - "com.citusdata.role=Worker"
    depends_on:
      - cluster_manager
    environment: *AUTH
    volumes:
      - healthcheck-volume:/healthcheck
      - citus-worker1-data:/var/lib/postgresql/data
      - db-init-signal:/db-init-signal
      - worker-signal:/worker-signal
      - worker-backups:/backups
    networks:
      - citus-network

  pg_worker_2:
    container_name: "pg_worker_2"
    build:
      context: .
      dockerfile: worker-node/Dockerfile
    platform: linux/amd64
    labels:
      - "com.citusdata.role=Worker"
    depends_on:
      - cluster_manager
    environment: *AUTH
    volumes:
      - healthcheck-volume:/healthcheck
      - citus-worker2-data:/var/lib/postgresql/data
      - db-init-signal:/db-init-signal
      - worker-signal:/worker-signal
      - worker-backups:/backups
    networks:
      - citus-network

  backup_service:
    container_name: "pg_backup_service"
    build:
      context: .
      dockerfile: worker-backup/Dockerfile
    environment:
      <<: *AUTH
      WORKER_NAMES: "pg_worker_1,pg_worker_2"
      ARCHIVE_INTERVAL: "300"
      FULL_BACKUP_INTERVAL: "86400"
      RETENTION_DAYS: "7"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - worker-backups:/backups
      - worker-signal:/worker-signal
    networks:
      - citus-network
    depends_on:
      - pg_worker_1
      - pg_worker_2

  recovery_service:
    container_name: "pg_recovery_service"
    build: 
      context: .
      dockerfile: worker-recovery/Dockerfile
    environment:
      <<: *AUTH
      WORKER_NAMES: "pg_worker_1,pg_worker_2"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - worker-backups:/backups
      - worker-signal:/worker-signal
    networks:
      - citus-network
    depends_on:
      - pg_worker_1
      - pg_worker_2
      - backup_service

  cluster_manager:
    container_name: "pg_cluster_manager"
    platform: linux/amd64
    image: "citusdata/membership-manager:latest"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - healthcheck-volume:/healthcheck
    depends_on:
      pg_master:
        condition: service_healthy
    environment:
      <<: *AUTH
      CITUS_HOST: pg_master
    networks:
      - citus-network
    command: sh -c "touch /healthcheck/manager-ready && python /manager.py"

  pg_admin:
    container_name: "pg_admin"
    platform: linux/amd64
    image: "dpage/pgadmin4:latest"
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
      PGADMIN_SERVER_JSON_FILE: "/pgadmin4/servers.json"
    ports:
      - "8080:80"
    volumes:
      - ./pgadmin/citus-servers.json:/pgadmin4/servers.json
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - citus-network
    depends_on:
      pg_master:
        condition: service_healthy
      pg_worker_1:
        condition: service_started
      pg_worker_2:
        condition: service_started

  db_init:
    container_name: "pg_db_init"
    image: python:3.11-slim
    platform: linux/amd64
    volumes:
      - ./db-engine/db-init.py:/db-init.py
      - ./db-engine/schema.sql:/schema.sql
      - ./db-engine/db-init.sh:/db-init.sh
      - db-init-signal:/db-init-signal
      - python-init-logs:/app/db-store
    command: >
      sh -c "
        python3 -m venv /venv &&
        . /venv/bin/activate &&
        pip install --upgrade pip --quiet &&
        pip install --no-cache-dir --quiet psycopg2-binary==2.9.9 &&
        chmod +x /db-init.sh
        /db-init.sh
      "
    environment: &POSTGRES
      POSTGRES_HOST: pg_master
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: citus
    networks:
      - citus-network
    depends_on:
      pg_master:
        condition: service_healthy

  db_engine:
    container_name: "db_engine"
    build:
      context: .
      dockerfile: db-engine/Dockerfile.db-engine
    environment:
      <<: *POSTGRES
    networks:
      - citus-network
    depends_on:
      pg_master:
        condition: service_healthy

  ai_engine_1:
    container_name: "ai_engine_1"
    build: 
      context: .
      dockerfile: ai-engine/Dockerfile
    volumes:
      - db-init-signal:/db-init-signal
      - ./ai-engine/config.yml:/app/config.yml
    environment: 
      <<: *POSTGRES
      LLM_ID: "18001"
      CONFIG_FILE: /app/config.yml
    ports:
      - "8001:8000"
    networks:
      - citus-network
    depends_on:
      pg_master:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
      cache_engine:
        condition: service_started

  ai_engine_2:
    container_name: "ai_engine_2"
    build:
      context: .
      dockerfile: ai-engine/Dockerfile
    volumes:
      - db-init-signal:/db-init-signal
      - ./ai-engine/config.yml:/app/config.yml
    environment: 
      <<: *POSTGRES
      LLM_ID: "18002"
      CONFIG_FILE: /app/config.yml
    ports:
      - "8002:8000"
    networks:
      - citus-network
    depends_on:
      pg_master: 
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
      cache_engine:
        condition: service_started

  ai_engine_3:
    container_name: "ai_engine_3"
    build:
      context: .
      dockerfile: ai-engine/Dockerfile
    volumes:
      - db-init-signal:/db-init-signal
      - ./ai-engine/config.yml:/app/config.yml
    environment: 
      <<: *POSTGRES
      LLM_ID: "18003"
      CONFIG_FILE: /app/config.yml
    ports:
      - "8003:8000"
    networks:
      - citus-network
    depends_on:
      pg_master: 
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
      cache_engine:
        condition: service_started

  load_balancer:
    container_name: "ai-engine_load_balancer"
    image: nginx:latest
    platform: linux/amd64
    volumes:
      - ./nginx-ai-engine/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      ai_engine_1:
        condition: service_started
      ai_engine_2:
        condition: service_started
      ai_engine_3:
        condition: service_started
    ports:
      - "80:80"
    networks:
      - citus-network

  redis:
    container_name: "redis_cache"
    platform: linux/amd64
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - citus-network

  cache_engine:
    container_name: "cache_engine"
    build:
      context: .
      dockerfile: cache-engine/Dockerfile
    environment:
      HOST: redis
      PORT: 6379
    ports:
      - "6380:6380"
    networks:
      - citus-network
    depends_on:
      redis:
        condition: service_started

  log_monitor:
    container_name: "log_monitor"
    image: alpine
    volumes:
      - python-init-logs:/logs
    command: tail -f /dev/null

volumes:
  healthcheck-volume:
  citus-master-data:
  citus-worker1-data:
  citus-worker2-data:
  pgadmin-data: 
  db-init-signal:
  worker-signal:
  redis-data:
  python-init-logs:
  worker-backups:
    driver: local